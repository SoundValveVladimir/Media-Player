import os
import glob
import time
import pyaudio
import random
import sounddevice as sd
import numpy as np
import soundfile as sf
import multiprocessing as mp
from multiprocessing import Process
from PyQt5.QtWidgets import (QAction, QApplication, QWidget,
    QMessageBox, QListWidgetItem, QFileDialog, QMenu, QListWidget
)
from PyQt5.QtGui import QIcon, QMouseEvent, QCursor
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, pyqtSlot
from pygame import mixer
from mutagen.mp3 import MP3
from mutagen.flac import FLAC
from mutagen.wave import WAVE
from mutagen.oggvorbis import OggVorbis
from State_Manager import StateManager
from Hotkeys import HotkeyManager
from UI import UI
from SavePaths import SavePathsThread

class AdvancedPlayer(QWidget):
    def __init__(self, default_mode='single_device'):
        super().__init__()
        self.ui = UI(self)
        self.hotkey_manager = HotkeyManager(self)
        self.mode = "sequential"
        self.ui.mode_button.clicked.connect(self.toggle_play_mode)
        self.ui.browse_button.clicked.connect(self.browse_menu)
        self.current_track_index = 0
        self.current_index = 0
        self.volume = 1.0
        self.is_muted = False
        self.is_playing = False
        self.play_mode = 'sequential'  # 'sequential', 'shuffle', 'repeat'
        self.default_mode = default_mode  # 'single_device' or 'multi_device'
        self.multi_device_enabled = True  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

    def browse_menu(self):
        with open("./Data/style2.qss", "r", encoding="utf-8") as style_file:
            browse_menu = QMenu(self)
            browse_menu.setStyleSheet(style_file.read())
        browse_action = QAction("–í—ã–±—Ä–∞—Ç—å üìÇ", self)
        browse_action.triggered.connect(self.browse_directory)
        file_action = QAction("–í—ã–±—Ä–∞—Ç—å ‚ô´‚ô´‚ô´", self)
        file_action.triggered.connect(self.browse_files)
        add_action = QAction("–î–æ–±–∞–≤–∏—Ç—å ‚ô´‚ô´‚ô´", self)
        add_action.triggered.connect(self.add_files)
        browse_menu.addAction(browse_action)
        browse_menu.addAction(file_action)
        browse_menu.addAction(add_action)
        browse_menu.exec_(QCursor.pos())

    def browse_directory(self):
        try: # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            directory = QFileDialog.getExistingDirectory(
                self, "–í—ã–±–µ—Ä–∏—Ç–µ üìÇ", "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                QFileDialog.ShowDirsOnly
            )
            if directory: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
                self.rootpath = os.path.normpath(directory)
                self.load_tracks(self.rootpath)
            else:
                pass
        except Exception as e: # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            QMessageBox.critical(
               self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ üìÇ: {str(e)}"
            )
            
    def browse_files(self):
        try:
            file_paths, _ = QFileDialog.getOpenFileNames(
                self, "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã ‚ô´‚ô´‚ô´", "", "Audio Files (*.mp3 *.wav *.flac *.ogg)")
            if file_paths:
                self.rootpath = [os.path.normpath(path) for path in file_paths]
                self.load_tracks(self.rootpath)
            else:
                pass
        except Exception as e:
            QMessageBox.critical(
               self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ‚ô´‚ô´‚ô´: {str(e)}"
            )
            
    def add_files(self):
        try:
            file_paths, _ = QFileDialog.getOpenFileNames(
                self, "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã ‚ô´‚ô´‚ô´", "", "Audio Files (*.mp3 *.wav *.flac *.ogg)")
            if file_paths:
                self.rootpath = [os.path.normpath(path) for path in file_paths]
                self.add_tracks(self.rootpath)
            else:
                print("–§–∞–π–ª—ã ??? –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        except Exception as e:
            QMessageBox.critical(
               self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ ‚ô´‚ô´‚ô´: {str(e)}"
            )

    def seconds_to_hh_mm_ss(self, seconds):
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        return f"{int(hours):02}:{int(minutes):02}:{int(seconds):02}"

    def save_listbox_paths(self): # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ listbox –≤ self.rootpath.
        try:
            self.save_paths_thread = SavePathsThread(listbox=self.ui.listbox)
            self.save_paths_thread.finished.connect(self.handle_paths_saved)
            self.save_paths_thread.start()
        except Exception as e:
            QMessageBox.critical(
            self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π: {str(e)}")

    def handle_paths_saved(self, paths):
        try:
            self.rootpath = paths
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π: {str(e)}")

    def load_tracks(self, rootpath, state=None):
        try:
            files = []
            if isinstance(rootpath, str) and os.path.exists(rootpath) and os.path.isdir(rootpath):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                formats = ["*.mp3", "*.wav", "*.flac", "*.ogg"]
                for pattern in formats:
                    files.extend(glob.glob(os.path.join(rootpath, pattern)))
                if not files:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É—Å—Ç–∞ –ª–∏ –ø–∞–ø–∫–∞
                    QMessageBox.warning(self.ui, "–ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.", QMessageBox.Ok)
                    return
            elif isinstance(rootpath, list) and all(os.path.isfile(path) for path in rootpath):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
                files = rootpath
            else:
                QMessageBox.warning(self, "–ù–µ—É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫–∏")
                self.add_choose_item()
                return
            self.ui.listbox.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
            total_duration = 0  # –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
            unsupported_files = []
            for i, track_path in enumerate(files, start=1):
                try:
                    MAX_TEXT_LENGTH = 30
                    track_name = os.path.splitext(os.path.basename(track_path))[0]
                    if len(track_name) > MAX_TEXT_LENGTH:
                        track_name = track_name[:MAX_TEXT_LENGTH] + '...'
                    numbered_track_name = f"{i}. {track_name}"
                    item = QListWidgetItem(numbered_track_name)  # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º —Ç—Ä–µ–∫–∞
                    item.setData(Qt.UserRole, track_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    self.ui.listbox.addItem(item)
                    track_duration = self.get_track_duration(track_path)
                    if track_duration is not None:
                        total_duration += track_duration  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
                    else:
                        unsupported_files.append(track_path)
                except Exception as e:
                    unsupported_files.append(track_path)
            track_count = self.ui.listbox.count()
            self.ui.track_info_label.setText(f"‚ô´ {track_count} | {self.seconds_to_hh_mm_ss(total_duration)}")
            self.ui.track_info_label.setToolTip(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ô´: {track_count} | –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.seconds_to_hh_mm_ss(total_duration)}")
            if unsupported_files:
                QMessageBox.warning(self.ui, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(unsupported_files))
            # if state is not None:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            #     track_index, start_offset, volume, play_mode = state
            #     self.play_track(track_index=track_index, start_offset=start_offset)
            #     self.ui.volume_slider.setValue(volume)
            #     self.set_volume(volume)
            #     self.set_play_mode(play_mode)
            # else:  # –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            #     if track_count > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–∫–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            #         self.current_index = 0
            #         self.play_track(track_index=0, start_offset=0)
            #     else:
            #         self.add_choose_item()
        except Exception as e:
            QMessageBox.critical(self.ui, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤: {e}")
        finally:
            self.save_listbox_paths()

    def get_track_duration(self, track_path):
        try:
            if track_path.endswith(".mp3"):
                return MP3(track_path).info.length
            elif track_path.endswith(".flac"):
                return FLAC(track_path).info.length
            elif track_path.endswith(".wav"):
                return WAVE(track_path).info.length
            elif track_path.endswith(".ogg"):
                return OggVorbis(track_path).info.length
            else:
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {track_path}: {e}")

    def play_track(self, track_index=None, start_offset=0):
        if track_index is None:
            track_index = self.current_index
        QTimer.singleShot(0, lambda: self._play_track_internal(track_index, start_offset))

    def _play_track_internal(self, track_index, start_offset):
        try:
            if track_index is None or track_index < 0 or track_index >= self.ui.listbox.count():
                return  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            item = self.ui.listbox.item(track_index) # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if not item:
                self.play_prev_next("next")
                raise FileNotFoundError("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
            if item.text() == "–í—ã–±–µ—Ä–∏—Ç–µ üìÇ –∏–ª–∏ ‚ô´‚ô´‚ô´":
                return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–∫
            track_path = item.data(Qt.UserRole) # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            track_name = os.path.splitext(os.path.basename(track_path))[0]
            self.audio_file = track_path
            if self.multi_device_enabled:
                 self.play_on_multiple_devices(track_path)
            else:
                 mixer.init()
                 mixer.music.stop()
                 mixer.music.load(track_path) # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ 
                 mixer.music.play(start=start_offset) # –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
            self.current_index = track_index  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            #self.track_started.emit()
            self.start_time = time.time() - start_offset # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.ui.track_label.setToolTip(f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç - {track_name}")
            MAX_TEXT_LENGTH = 30
            if len(track_name) > MAX_TEXT_LENGTH:
                track_name = track_name[:MAX_TEXT_LENGTH] + '...'
            self.ui.track_label.setText(f"‚ô´ {track_name}")
            duration = self.get_track_duration(track_path)
            self.track_duration = int(duration)
            self.ui.song_position_slider.setMaximum(int(self.track_duration * 1000))
            self.ui.listbox.setCurrentRow(track_index)
            self.ui.play_pause_button.setIcon(self.ui.pause_img)
            self.ui.position_label_right.setText(self.seconds_to_mm_ss(self.track_duration)) # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.ui.song_position_slider.setValue(int(start_offset))
            self.slider_moved = False
            #self.calculate_next_track_index()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            self.play_prev_next("next")

    def seconds_to_mm_ss(self, seconds):
        minutes, seconds = divmod(int(seconds), 60)
        return f"{minutes:02}:{seconds:02}"

    def play(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        if self.current_track_index != -1:
            track = self.playlist_widget.item(self.current_track_index).text()
            print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞: {track}")
            self.is_playing = True
            # –õ–æ–≥–∏–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ (—á–µ—Ä–µ–∑ PyAudio –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥)

            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏:
            if self.multi_device_enabled:
                self.play_on_multiple_devices(track)

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        self.is_playing = False
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        # –õ–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

    def pause(self):
        """–°—Ç–∞–≤–∏—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É"""
        if self.is_playing:
            self.is_playing = False
            print("–ü–∞—É–∑–∞")
            # –õ–æ–≥–∏–∫–∞ –ø–∞—É–∑—ã

    def next_track(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        if self.play_mode == 'shuffle':
            next_index = random.randint(0, self.playlist_widget.count() - 1)
        else:
            next_index = (self.current_track_index + 1) % self.playlist_widget.count()

        self.load_track(next_index)
        self.play()

    def prev_track(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
        prev_index = (self.current_track_index - 1) % self.playlist_widget.count()
        self.load_track(prev_index)
        self.play()

    def toggle_mute(self):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫"""
        self.is_muted = not self.is_muted
        if self.is_muted:
            print("–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω")
        else:
            print("–ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω")
        # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ PyAudio)

    def set_volume(self, level: float):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        self.volume = level
        print(f"–£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {level}")
        # –õ–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏

    def toggle_play_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        modes = ['sequential', 'shuffle', 'repeat']
        current_index = modes.index(self.play_mode)
        self.play_mode = modes[(current_index + 1) % len(modes)]
        print(f"–†–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {self.play_mode}")

    def play_on_multiple_devices(self, track_path):
        try:
            # Example of initializing a stream on multiple devices
            device_list = sd.query_devices()
            if len(device_list) > 1:
                data, sample_rate = sf.read(track_path)
                processes = []
                for device in device_list:
                    if device['max_output_channels'] >= 2:  # Assuming stereo output
                        p = Process(target=self.stream_audio, args=(data, sample_rate, device['name']))
                        p.start()
                        processes.append(p)
                for p in processes:
                    p.join()
            else:
                raise RuntimeError("Not enough devices for multi-device playback.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", f"–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
        
    def stream_audio(self, data, sample_rate, device_name):
         sd.play(data, sample_rate, device=device_name)
         sd.wait()

    def update_progress(self, progress):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–∞"""
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    def toggle_multi_device_mode(self):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
        self.multi_device_enabled = not self.multi_device_enabled
        mode = "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞" if self.multi_device_enabled else "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        print(mode)

    def select_mode(self, mode):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if mode == 'multi_device':
            self.multi_device_enabled = True
        else:
            self.multi_device_enabled = False
        print(f"–†–µ–∂–∏–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—è: {mode}")
